# ==================================================================
# Project Metadata (PEP 621)
# ==================================================================
[project]
name = "acme"
version = "0.1.0a0"
description = ""
requires-python = ">=3.12"

# License and compatibility information
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

# ==================================================================
# Core Runtime Dependencies
# ==================================================================
# Minimal dependencies required for production use
dependencies = [
'absl-py',
    'dm-env',
    'dm-tree',
    'numpy',
    'pillow',
    'typing-extensions',
]

# External links
[project.urls]
Configuration = "README.md#configuration"
Documentation = ""

# ==================================================================
# Optional Dependencies
# ==================================================================
[project.optional-dependencies]

# ---------- Tooling ----------
dev = [
    "black==25.1.0",
    "isort==5.13.2",
    "ruff==0.11.11",
    "pyright==1.1.401",
    "pre-commit",
]

test = [
    "pytest==8.4.1",
    "pytest-asyncio>=0.26.0",
    "pytest-mock>=3.14.0",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.6.0",
    "pytest-cov>=6.1.1",
    "coverage[toml]",
    "hypothesis>=6.131.10",
]

typecheck = [
    "pytype==2024.10.11",
]

docs = [
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "mkdocs-mermaid2-plugin",
    "mkdocs-autorefs>=1.0",
    "mkdocstrings[python]>=0.21",
    "interrogate",
]

notebook = [
    "jupyter==1.0.0",
    "ipykernel==6.17.1",
    "pyarrow",
    "pandera",
    "nbformat",
]

utilities = [
    "python-dotenv==1.0.0",
    "PyYAML",
    "retry==0.9.2",
    "pandas",
]

pdf = [
    "requests",
    "tqdm",
]

api = [
    "fastapi",
    "uvicorn",
]

envs = [
    # Removed packages incompatible with Python 3.12:
    # - atari-py: build issues on Python 3.12
    # - bsuite: uses deprecated imp module 
    # - rlds: only supports Python 3.7-3.10
    "dm-control",
    "gymnasium==1.2.0",
    "gymnasium[atari]",  # Provides Atari environments without atari-py
    "pygame==2.6.1",
]

# Optional RL benchmarking alternatives to bsuite (install separately)
benchmarks = [
    "stable-baselines3>=2.4.0",  # Modern RL algorithms and benchmarks
]

# ---------- ML stacks (compose via extras to avoid duplication) ----------

# JAX (modern)
jax_core = [
    "jax==0.7.1",
    "jaxlib==0.7.1",
]
jax_addons = [
    "chex==0.1.90",
    "dm-haiku>=0.0.12",
    "flax==0.11.2",
    "optax==0.2.5",
    "rlax>=0.1.7",
]

# JAX (legacy core only; compose with jax_addons if needed)
jax_legacy_core = [
    "jax==0.4.3",
    "jaxlib==0.4.3",
]

# TensorFlow (modern)
tf_core = [
    "tensorflow==2.20.0",
]
tf_ecosystem = [
    "tensorflow-probability>=0.25.0",
    "tensorflow-datasets>=4.9.6",
    "dm-reverb>=0.14.0",
    "dm-launchpad>=0.5.4",
]

# TensorFlow (legacy)
tf_legacy_core = [
    "tensorflow==2.8.0",
]
tf_legacy_ecosystem = [
    "tensorflow-probability==0.15.0",
    "tensorflow-datasets==4.6.0",
    "dm-reverb==0.7.2",
    "dm-launchpad==0.5.2",
    "dm-sonnet",
    "trfl",
]

# Flax NNX convenience extra. Compose with jax_core (or jax_legacy_core) to
# pull in the NNX-capable Flax/Optax/Chex/RLax stack. Use this during migration
# from Haiku to Flax NNX.
flax_nnx = [
    "flax==0.11.2",
    "optax==0.2.5",
    "chex==0.1.90",
    "rlax>=0.1.7",
]


# ==================================================================
# Tool Configuration
# ==================================================================

# --- Code Formatting ---
[tool.black]
line-length = 120
target-version = ["py312"]

[tool.isort]
profile = "black"
combine_as_imports = false

# --- Linting ---
[tool.ruff]
line-length = 120
target-version = "py312"
extend-exclude = [".venv", "*.ipynb"]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "UP"]  # Error, Pyflakes, Import, Naming, pyupgrade
ignore = ["I001"]                     # Let isort handle import sorting

# --- Type Checking ---
[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
check_untyped_defs = true
files = ["src"]

# --- Testing ---
[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
filterwarnings = [
    # Suppress deprecations from Pydantic v2.11 category emitted by Inspect-AI store model
    "ignore::pydantic.warnings.PydanticDeprecatedSince211",
    # Target the specific unknown config option; avoid colons in message field
    "ignore:Unknown config option.*asyncio_default_fixture_loop_scope.*:pytest.PytestConfigWarning",
]

# --- Documentation ---
[tool.interrogate]
fail-under = 100
exclude = ["tests", "docs"]

# ==================================================================
# Build System Configuration
# ==================================================================
[build-system]
requires = ["pdm-backend>=2.4.4"]
build-backend = "pdm.backend"

[tool.pdm]
distribution = true
package-dir = { "" = "src" }

[tool.uv]
package = true
environments = [
    "sys_platform == 'linux'  and python_version >= '3.12'",
    "sys_platform == 'darwin' and python_version >= '3.12'",
]
